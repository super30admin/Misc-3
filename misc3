Capacity To Ship Packages Within D Days
class Solution:
    def canShip(self, capacity, days, weights):
        dayCount = 1
        
        currWeight = 0
        
        for weight in weights:
            currWeight += weight
            if currWeight > capacity:
                dayCount += 1
                if dayCount > days: return False
                currWeight = weight
        
        return True
    
    
    def shipWithinDays(self, weights: List[int], days: int) -> int:
        minimumCapacity = 0
        start = max(weights)
        end = sum(weights)
        
        while start <= end:
            mid = start + (end - start) // 2
            if self.canShip(mid, days, weights):
                minimumCapacity = mid
                end = mid - 1
            else: 
                start = mid + 1
                
        return minimumCapacity
 Reverse Nodes in k-Group
 #tc: O(n)
#sc: O(1)
class Solution:
    def reverseKGroup(self, head, k):
        dummy = ListNode(0)
        dummy.next = head
        cur, nxt, pre = dummy, dummy, dummy
        cnt = 0
        while cur.next:
            cnt += 1
            cur = cur.next
            
        while cnt >= k:
            cur = new = pre.next
            nxt = cur.next
            for _ in range(k-1):
                tmp = nxt.next
                nxt.next = cur
                cur = nxt
                nxt = tmp
            
            pre.next = cur
            new.next = nxt
            pre = new
            cnt -= k
            
        return dummy.next
    
